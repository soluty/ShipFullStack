name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  # 检测哪些应用需要部署
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            server:
              - 'apps/server/**'
              - 'package.json'
              - 'pnpm-lock.yaml'

  # 部署 Web 应用
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.web == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web application
        run: pnpm run build
        working-directory: ./apps/web

      - name: Deploy web to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./apps/web
          command: deploy

      - name: Deploy notification
        if: success()
        run: echo "✅ Web app deployed successfully!"

  # 部署 Server 应用
  deploy-server:
    name: Deploy Server App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.server == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy server to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./apps/server
          command: deploy

      - name: Sync server secrets (Optional)
        if: false  # 按需启用，需要配置额外的环境变量
        run: pnpm run sync:secrets
        working-directory: ./apps/server
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy notification
        if: success()
        run: echo "✅ Server app deployed successfully!"

  # 部署完成通知
  notify:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-web, deploy-server]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Application | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-web.result }}" == "success" ]; then
            echo "| Web App | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-web.result }}" == "skipped" ]; then
            echo "| Web App | ⏭️ Skipped (No changes) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Web App | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-server.result }}" == "success" ]; then
            echo "| Server App | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-server.result }}" == "skipped" ]; then
            echo "| Server App | ⏭️ Skipped (No changes) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Server App | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
