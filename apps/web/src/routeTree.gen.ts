/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AuthAuthViewRouteImport } from './routes/auth/$authView'
import { Route as PublicTermsRouteImport } from './routes/_public/terms'
import { Route as PublicPrivacyRouteImport } from './routes/_public/privacy'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard/dashboard'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/$authView',
  path: '/$authView',
  getParentRoute: () => AuthRouteRoute,
} as any)
const PublicTermsRoute = PublicTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicPrivacyRoute = PublicPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => PublicRouteRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/_dashboard/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardDashboardRoute
  '/privacy': typeof PublicPrivacyRoute
  '/terms': typeof PublicTermsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardDashboardRoute
  '/privacy': typeof PublicPrivacyRoute
  '/terms': typeof PublicTermsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/': typeof PublicIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_public/privacy': typeof PublicPrivacyRoute
  '/_public/terms': typeof PublicTermsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/_public/': typeof PublicIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/dashboard'
    | '/privacy'
    | '/terms'
    | '/auth/$authView'
    | '/auth/callback'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/dashboard'
    | '/privacy'
    | '/terms'
    | '/auth/$authView'
    | '/auth/callback'
    | '/'
  id:
    | '__root__'
    | '/_public'
    | '/auth'
    | '/_dashboard/dashboard'
    | '/_public/privacy'
    | '/_public/terms'
    | '/auth/$authView'
    | '/auth/callback'
    | '/_public/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardDashboardRoute: typeof DashboardDashboardRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_public/terms': {
      id: '/_public/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof PublicTermsRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/privacy': {
      id: '/_public/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PublicPrivacyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PublicRouteRouteChildren {
  PublicPrivacyRoute: typeof PublicPrivacyRoute
  PublicTermsRoute: typeof PublicTermsRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicPrivacyRoute: PublicPrivacyRoute,
  PublicTermsRoute: PublicTermsRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthAuthViewRoute: typeof AuthAuthViewRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAuthViewRoute: AuthAuthViewRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PublicRouteRoute: PublicRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardDashboardRoute: DashboardDashboardRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
