/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Char123LocaleChar125TermsRouteImport } from './routes/{-$locale}/terms'
import { Route as Char123LocaleChar125PrivacyRouteImport } from './routes/{-$locale}/privacy'
import { Route as AuthAuthViewRouteImport } from './routes/auth/$authView'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Char123LocaleChar125TermsRoute =
  Char123LocaleChar125TermsRouteImport.update({
    id: '/{-$locale}/terms',
    path: '/{-$locale}/terms',
    getParentRoute: () => rootRouteImport,
  } as any)
const Char123LocaleChar125PrivacyRoute =
  Char123LocaleChar125PrivacyRouteImport.update({
    id: '/{-$locale}/privacy',
    path: '/{-$locale}/privacy',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/auth/$authView',
  path: '/auth/$authView',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/{-$locale}/privacy': typeof Char123LocaleChar125PrivacyRoute
  '/{-$locale}/terms': typeof Char123LocaleChar125TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/{-$locale}/privacy': typeof Char123LocaleChar125PrivacyRoute
  '/{-$locale}/terms': typeof Char123LocaleChar125TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/{-$locale}/privacy': typeof Char123LocaleChar125PrivacyRoute
  '/{-$locale}/terms': typeof Char123LocaleChar125TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth/$authView'
    | '/{-$locale}/privacy'
    | '/{-$locale}/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/auth/$authView'
    | '/{-$locale}/privacy'
    | '/{-$locale}/terms'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth/$authView'
    | '/{-$locale}/privacy'
    | '/{-$locale}/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  AuthAuthViewRoute: typeof AuthAuthViewRoute
  Char123LocaleChar125PrivacyRoute: typeof Char123LocaleChar125PrivacyRoute
  Char123LocaleChar125TermsRoute: typeof Char123LocaleChar125TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$locale}/terms': {
      id: '/{-$locale}/terms'
      path: '/{-$locale}/terms'
      fullPath: '/{-$locale}/terms'
      preLoaderRoute: typeof Char123LocaleChar125TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$locale}/privacy': {
      id: '/{-$locale}/privacy'
      path: '/{-$locale}/privacy'
      fullPath: '/{-$locale}/privacy'
      preLoaderRoute: typeof Char123LocaleChar125PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/auth/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  AuthAuthViewRoute: AuthAuthViewRoute,
  Char123LocaleChar125PrivacyRoute: Char123LocaleChar125PrivacyRoute,
  Char123LocaleChar125TermsRoute: Char123LocaleChar125TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
